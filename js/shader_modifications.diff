540c540
< //!SAVE MMKERNEL
---
> //!SAVE MMMKERNEL
546c546
< 	return max(max(a, b), c);
---
>     return max(max(a, b), c);
549c549
< 	return min(min(a, b), c);
---
>     return min(min(a, b), c);
553,561c553,561
< 	float a0 = L_tex(pos - d).x;
< 	float b0 = L_tex(pos).x;
< 	float c0 = L_tex(pos + d).x;
< 	
< 	float a1 = L_tex(pos - d).y;
< 	float b1 = L_tex(pos).y;
< 	float c1 = L_tex(pos + d).y;
< 	
< 	return vec2(min3v(a0, b0, c0), max3v(a1, b1, c1));
---
>     float a0 = L_tex(pos - d).x;
>     float b0 = L_tex(pos).x;
>     float c0 = L_tex(pos + d).x;
> 
>     float a1 = L_tex(pos - d).y;
>     float b1 = L_tex(pos).y;
>     float c1 = L_tex(pos + d).y;
> 
>     return vec2(min3v(a0, b0, c0), max3v(a1, b1, c1));
572c572
< //!BIND MMKERNEL
---
> //!BIND MMMKERNEL
577c577
< #define STRENGTH 1 //De-blur proportional strength, higher is sharper. However, it is better to tweak BLUR_CURVE instead to avoid ringing.
---
> #define STRENGTH 1.0 //De-blur proportional strength, higher is sharper. However, it is better to tweak BLUR_CURVE instead to avoid ringing.
583,602c583,607
< 	vec2 f = fract(LUMAN0_pos * LUMAN0_size);
< 	ivec2 i = ivec2(f * vec2(2));
< 	float c0 = LUMAN0_tex((vec2(0.5) - f) * LUMAN0_pt + LUMAN0_pos)[i.y * 2 + i.x];
< 	float c = c0 * STRENGTH;
< 	
< 	vec2 mm = MMKERNEL_tex((vec2(0.5) - f) * MMKERNEL_pt + MMKERNEL_pos).xy;
< 	
< 	float t_range = BLUR_THRESHOLD - NOISE_THRESHOLD;
< 	
< 	float c_t = abs(c);
< 	if (c_t > NOISE_THRESHOLD && c_t < BLUR_THRESHOLD) {
< 		c_t = (c_t - NOISE_THRESHOLD) / t_range;
< 		c_t = pow(c_t, BLUR_CURVE);
< 		c_t = c_t * t_range + NOISE_THRESHOLD;
< 		c_t = c_t * sign(c);
< 		return vec4(clamp(c_t + HOOKED_tex(HOOKED_pos).x, MMKERNEL_tex(HOOKED_pos).x, MMKERNEL_tex(HOOKED_pos).y), HOOKED_tex(HOOKED_pos).yz, 0);
< 	} else {
< 		return vec4(c + HOOKED_tex(HOOKED_pos).x, HOOKED_tex(HOOKED_pos).yz, 0);
< 	}
< 	
---
>     vec2 f = fract(LUMAN0_pos * LUMAN0_size);
>     ivec2 i = ivec2(f * vec2(2));
>     vec4 tt = LUMAN0_tex((vec2(0.5) - f) * LUMAN0_pt + LUMAN0_pos);
>     int j = i.y * 2 + i.x;
>     float c0 = tt.w;
>     if (j == 0)   { c0 = tt.x; }
>     else if (j == 1)   { c0 = tt.y; }
>     else if (j == 2)   { c0 = tt.z; }
>     float c = c0 * STRENGTH;
> 
>     vec2 mm = MMMKERNEL_tex((vec2(0.5) - f) * MMMKERNEL_pt + MMMKERNEL_pos).xy;
> 
>     float t_range = BLUR_THRESHOLD - NOISE_THRESHOLD;
> 
>     float c_t = abs(c);
>     if (c_t > NOISE_THRESHOLD && c_t < BLUR_THRESHOLD) {
>         c_t = (c_t - NOISE_THRESHOLD) / t_range;
>         c_t = pow(c_t, BLUR_CURVE);
>         c_t = c_t * t_range + NOISE_THRESHOLD;
>         c_t = c_t * sign(c);
>         return vec4(clamp(c_t + HOOKED_tex(HOOKED_pos).x, MMMKERNEL_tex(HOOKED_pos).x, MMMKERNEL_tex(HOOKED_pos).y), HOOKED_tex(HOOKED_pos).yz, 0);
>     } else {
>         return vec4(c + HOOKED_tex(HOOKED_pos).x, HOOKED_tex(HOOKED_pos).yz, 0);
>     }
> 
